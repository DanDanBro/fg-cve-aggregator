/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package utils;

import com.google.gson.Gson;
import com.google.gson.annotations.SerializedName;
import org.jetbrains.annotations.NotNull;

import java.io.Serializable;
import java.util.HashSet;
import java.util.LinkedHashSet;
import java.util.Objects;

public class Vulnerability implements Serializable, Comparable<Vulnerability> {

    private String id;
    @SerializedName(value = "base_cpe") //@TODO might need reconsideration
    private String baseCpe;
    private Double scoreCVSS2;
    private Double scoreCVSS3;
    private String vectorCVSS2;
    private String vectorCVSS3;
    @SerializedName("cwe_ids")
    private HashSet<String> cweIds;
    private Severity severityV2;

    private Severity severityV3;

    @SerializedName(value = "published_date")
    private String publishedDate;
    @SerializedName(value = "last_modified_date")
    private String lastModifiedDate;
    private String description;
    private HashSet<String> references;
    private LinkedHashSet<String> pkgVulnerablePurls; //Purls to vulnerable versions
    private HashSet<String> introducedVulnerableLinks; //Urls to vulnerability introducing commits
    @SerializedName(value = "first_patched_purls")
    private HashSet<String> firstPatchedPurls; //Purls to fixed versions
    @SerializedName(value = "patch_links")
    private HashSet<String> patchLinks; //Urls to fix commits
    private HashSet<String> exploits;
    private HashSet<Patch> patches;

    /**
     * Empty Constructor for Serialization
     */
    public Vulnerability() {
        this.pkgVulnerablePurls = new LinkedHashSet<>();
        this.firstPatchedPurls = new HashSet<>();
        this.introducedVulnerableLinks = new HashSet<>();
        this.cweIds = new HashSet<>();
        this.references = new HashSet<>();
        this.patches = new HashSet<>();
        this.patchLinks = new HashSet<>();
        this.exploits = new HashSet<>();
    }

    /**
     * Constructor for a Vulnerability Object.
     *
     * @param id - takes a String ID
     */
    public Vulnerability(String id) {
        this.id = id;
        this.pkgVulnerablePurls = new LinkedHashSet<>();
        this.firstPatchedPurls = new HashSet<>();
        this.introducedVulnerableLinks = new HashSet<>();
        this.cweIds = new HashSet<>();
        this.references = new HashSet<>();
        this.patches = new HashSet<>();
        this.patchLinks = new HashSet<>();
        this.exploits = new HashSet<>();
    }

    public String getId() {
        return id;
    }

    public void setId(String id) {
        this.id = id;
    }

    public String getBaseCpe() {
        return baseCpe;
    }

    public void setBaseCpe(String baseCpe) {
        this.baseCpe = baseCpe;
    }

    public Double getScoreCVSS2() {
        return scoreCVSS2;
    }

    public void setScoreCVSS2(Double scoreCVSS2) {
        this.scoreCVSS2 = scoreCVSS2;
    }

    public Double getScoreCVSS3() {
        return scoreCVSS3;
    }

    public void setScoreCVSS3(Double scoreCVSS3) {
        this.scoreCVSS3 = scoreCVSS3;
    }

    public String getVectorCVSS2() {
        return vectorCVSS2;
    }

    public void setVectorCVSS2(String vectorCVSS2) {
        this.vectorCVSS2 = vectorCVSS2;
    }

    public String getVectorCVSS3() {
        return vectorCVSS3;
    }

    public void setVectorCVSS3(String vectorCVSS3) {
        this.vectorCVSS3 = vectorCVSS3;
    }

    public HashSet<String> getCweIds() {
        return cweIds;
    }

    public void addCweId(String cweId) {
        this.cweIds.add(cweId);
    }

    public void setCweIds(HashSet<String> cweIds) {
        this.cweIds = cweIds;
    }

    public Severity getSeverityV2() {
        return severityV2;
    }

    public void setSeverityV2(Severity severityV2) {
        this.severityV2 = severityV2;
    }

    public Severity getSeverityV3() {
        return severityV3;
    }

    public void setSeverityV3(Severity severityV3) {
        this.severityV3 = severityV3;
    }

    public String getPublishedDate() {
        return publishedDate;
    }

    public void setPublishedDate(String publishedDate) {
        this.publishedDate = publishedDate;
    }

    public String getLastModifiedDate() {
        return lastModifiedDate;
    }

    public void setLastModifiedDate(String lastModifiedDate) {
        this.lastModifiedDate = lastModifiedDate;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public HashSet<String> getReferences() {
        return references;
    }

    public void addReference(String reference) {
        this.references.add(reference);
    }

    public void setReferences(HashSet<String> references) {
        this.references = references;
    }

    public LinkedHashSet<String> getPkgVulnerablePurls() {
        return pkgVulnerablePurls;
    }

    public void addPkgVulnerablePurl(String pkgVulnerablePurl) {
        this.pkgVulnerablePurls.add(pkgVulnerablePurl);
    }

    public void setPkgVulnerablePurls(LinkedHashSet<String> pkgVulnerablePurls) {
        this.pkgVulnerablePurls = pkgVulnerablePurls;
    }

    public HashSet<String> getIntroducedVulnerableLinks() {
        return introducedVulnerableLinks;
    }

    public void addIntroducedVulnerableLink(String introducedVulnerableLink) {
        this.introducedVulnerableLinks.add(introducedVulnerableLink);
    }

    public void setIntroducedVulnerableLinks(HashSet<String> introducedVulnerableLinks) {
        this.introducedVulnerableLinks = introducedVulnerableLinks;
    }

    public HashSet<String> getFirstPatchedPurls() {
        return firstPatchedPurls;
    }

    public void addFirstPatchedPurl(String firstPatchedPurl) {
        this.firstPatchedPurls.add(firstPatchedPurl);
    }

    public void setFirstPatchedPurls(HashSet<String> firstPatchedPurls) {
        this.firstPatchedPurls = firstPatchedPurls;
    }

    public HashSet<String> getPatchLinks() {
        return patchLinks;
    }

    public void addPatchLink(String patchLink) {
        this.patchLinks.add(patchLink);
    }

    public void setPatchLinks(HashSet<String> patchLinks) {
        this.patchLinks = patchLinks;
    }

    public HashSet<String> getExploits() {
        return exploits;
    }

    public void addExploit(String exploit) {
        this.exploits.add(exploit);
    }

    public void setExploits(HashSet<String> exploits) {
        this.exploits = exploits;
    }

    public HashSet<Patch> getPatches() {
        return patches;
    }

    public void addPatch(Patch patch) {
        this.patches.add(patch);
    }

    public void setPatches(HashSet<Patch> patches) {
        this.patches = patches;
    }

    @Override
    public String toString() {
        return "Vulnerability{" +
                "id='" + id + '\'' +
                ", base_cpe=" + baseCpe +
                ", purls=" + pkgVulnerablePurls +
                ", first_patched=" + firstPatchedPurls +
                ", first_introduced=" + introducedVulnerableLinks +
                ", patch_links=" + patchLinks +
                ", scoreCVSS2=" + scoreCVSS2 +
                ", scoreCVSS3=" + scoreCVSS3 +
                ", severityV2=" + severityV2 +
                ", severityV3=" + severityV3 +
                ", published_date='" + publishedDate + '\'' +
                ", last_modified_date='" + lastModifiedDate + '\'' +
                ", description='" + description + '\'' +
                ", references=" + references +
                ", exploits=" + exploits +
                ", patches=" + patches.toString() +
                '}';
    }

    /**
     * JSON Representation of the Vulnerability using GSON.
     *
     * @return String JSON
     */
    public String toJson() {
        Gson gson = new Gson();
        return gson.toJson(this);
    }

    /**
     * Merges the vulnerability object with another one
     *
     * @param v2 - vulnerability to merge with
     */
    public void merge(Vulnerability v2) {
        assert this.getId().equals(v2.getId());

        this.getPkgVulnerablePurls().addAll(v2.getPkgVulnerablePurls());
        this.getFirstPatchedPurls().addAll(v2.getFirstPatchedPurls());
        this.getIntroducedVulnerableLinks().addAll(v2.getIntroducedVulnerableLinks());
        this.getCweIds().addAll(v2.getCweIds());
        this.getReferences().addAll(v2.getReferences());
        this.getPatches().addAll(v2.getPatches());
        this.getExploits().addAll(v2.getExploits());
        this.getPatchLinks().addAll(v2.getPatchLinks());
        this.getPatches().addAll(v2.getPatches());
        if (v2.description != null && this.description != null) {
            if (v2.getDescription().length() > this.getDescription().length()) {
                this.setDescription(v2.getDescription());
            }
        }
        // Base CPE
        if (this.baseCpe == null) {
            if (v2.baseCpe != null) {
                this.setBaseCpe(v2.baseCpe);
            }
        }
        // Severity
        if (this.severityV2 == null) {
            if (v2.severityV2 != null) {
                this.setSeverityV2(v2.severityV2);
            }
        }
        if (this.severityV3 == null) {
            if (v2.severityV3 != null) {
                this.setSeverityV2(v2.severityV3);
            }
        }
        // Score CVSS2
        if (this.scoreCVSS2 == null) {
            if (v2.scoreCVSS2 != null) {
                this.setScoreCVSS2(v2.scoreCVSS2);
            }
        }
        // Score CVSS3
        if (this.scoreCVSS3 == null) {
            if (v2.scoreCVSS3 != null) {
                this.setScoreCVSS3(v2.scoreCVSS3);
            }
        }
        // Published Date
        if (this.publishedDate == null) {
            if (v2.publishedDate != null) {
                this.setPublishedDate(v2.publishedDate);
            }
        }
        // Last Modified Date
        if (this.lastModifiedDate == null) {
            if (v2.lastModifiedDate != null) {
                this.setLastModifiedDate(v2.lastModifiedDate);
            }
        }

        // VectorCVSS2
        if (this.vectorCVSS2 == null) {
            if (v2.vectorCVSS2 != null) {
                this.setVectorCVSS2(v2.vectorCVSS2);
            }
        }

        // VectorCVSS3
        if (this.vectorCVSS3 == null) {
            if (v2.vectorCVSS3 != null) {
                this.setVectorCVSS3(v2.vectorCVSS3);
            }
        }
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        Vulnerability that = (Vulnerability) o;
        return id.equals(that.id) &&
                Objects.equals(baseCpe, that.baseCpe) &&
                Objects.equals(pkgVulnerablePurls, that.pkgVulnerablePurls) &&
                Objects.equals(firstPatchedPurls, that.firstPatchedPurls) &&
                Objects.equals(introducedVulnerableLinks, that.introducedVulnerableLinks) &&
                Objects.equals(scoreCVSS2, that.scoreCVSS2) &&
                Objects.equals(scoreCVSS3, that.scoreCVSS3) &&
                Objects.equals(vectorCVSS2, that.vectorCVSS2) &&
                Objects.equals(vectorCVSS3, that.vectorCVSS3) &&
                Objects.equals(cweIds, that.cweIds) &&
                severityV2 == that.severityV2 &&
                severityV3 == that.severityV3 &&
                Objects.equals(publishedDate, that.publishedDate) &&
                Objects.equals(lastModifiedDate, that.lastModifiedDate) &&
                Objects.equals(description, that.description) &&
                Objects.equals(references, that.references) &&
                Objects.equals(patchLinks, that.patchLinks) &&
                Objects.equals(exploits, that.exploits) &&
                Objects.equals(patches, that.patches);
    }

    @Override
    public int hashCode() {
        return Objects.hash(id);
    }

    @Override
    public int compareTo(@NotNull Vulnerability other) {
        if(this.equals(other)) return 0;
        return compareCveId(other.getId());
    }

    private int compareCveId(String otherCveId) {
        var ourParsedCve = parseCveId(id);
        var otherParsedCve = parseCveId(otherCveId);
        if(ourParsedCve[0] == -1 && otherParsedCve[0] == -1) {
            return this.id.compareTo(otherCveId);
        }
        else {
            if(otherParsedCve[0] == -1) {
                return -1;
            }
            else {
                return ourParsedCve[0] > otherParsedCve[0] ||
                        ourParsedCve[0] == otherParsedCve[0] &&
                            ourParsedCve[1] > otherParsedCve[1] ? -1 : 1;
            }
        }
    }

    private int[] parseCveId(String cveId) {
        int[] cveNums = {-1, -1};
        if(cveId.startsWith("CVE")) {
            var elements = cveId.split("-");
            if(elements.length == 3) {
                try{
                    cveNums[0] = Integer.parseInt(elements[1]);
                    cveNums[1] = Integer.parseInt(elements[2]);
                }
                catch(NumberFormatException ignored) {
                }
            }
        }
        return cveNums;
    }
}


