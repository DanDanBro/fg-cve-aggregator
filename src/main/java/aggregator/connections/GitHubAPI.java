/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package aggregator.connections;

import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.PatchFinder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;

public class GitHubAPI {
    private final Logger logger = LoggerFactory.getLogger(GitHubAPI.class.getName());
    JavaHttpClient httpClient;
    String token;
    Gson jsonParser;

    public GitHubAPI(JavaHttpClient httpClient, String token, Gson jsonParser) {
        this.httpClient = httpClient;
        this.token = token;
        this.jsonParser = jsonParser;
    }

    /**
     * Uses API v4 to retrieve Merged Pull Requests that mention the issue under inspection
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getPRsMentioningIssue(String repoOwner,
                                              String repoName,
                                              String issueNumber) {
        List<String> mergeCommits = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " + issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ClosedEvent {\n" +
                "            closer {\n" +
                "              ... on PullRequest {\n" +
                "                number\n" +
                "                title\n" +
                "                mergeCommit {\n" +
                "                  url\n" +
                "                }\n" +
                "              }\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JsonObject payload = jsonParser.fromJson(jsonIssue, JsonObject.class);
            JsonObject data = payload.getAsJsonObject("data");
            if (data.get("repository") == null) return mergeCommits;
            JsonObject repository = data.getAsJsonObject("repository");
            if (repository.get("issue") == null)    return mergeCommits;
            JsonArray nodes = repository.getAsJsonObject("issue").getAsJsonObject("timelineItems").getAsJsonArray("nodes");
            for (JsonElement nodeObj : nodes) {
                var node = nodeObj.getAsJsonObject();
                if (node.get("closer") != null) {
                    // Grab number of the PR
                    var closer = node.getAsJsonObject("closer");
                    if (closer.get("mergeCommit") != null) {
                        var mergeCommitObj = closer.getAsJsonObject("mergeCommit");
                        if (mergeCommitObj.get("url") != null) {
                            var mergingCommit = mergeCommitObj.get("url").getAsString();
                            // Filter only commits belonging to the repo
                            if (mergingCommit.contains(repoOwner + "/" + repoName)) {
                                mergeCommits.add(mergingCommit);
                            }
                        }
                    }
                }
            }
        } catch (Exception e) {
            logger.error(String.valueOf(e));
        }
        return mergeCommits;
    }

    /**
     * Looks for the commit closing a GitHub issue.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - web url link to the commit.
     */
    public String getCommitClosingIssue(String repoOwner,
                                        String repoName,
                                        String issueNumber) {
        String commitRef = null;
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " + issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ClosedEvent {\n" +
                "            closer {\n" +
                "              ... on Commit {\n" +
                "                commitUrl\n" +
                "              }\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JsonObject payload = jsonParser.fromJson(jsonIssue, JsonObject.class);
            JsonObject data = payload.getAsJsonObject("data");
            if (data.get("repository") == null) return commitRef;
            JsonObject repository = data.getAsJsonObject("repository");
            if (repository.get("issue") == null)    return commitRef;
            JsonArray nodes = repository.getAsJsonObject("issue").getAsJsonObject("timelineItems").getAsJsonArray("nodes");
            for (JsonElement nodeObj : nodes) {
                var node = nodeObj.getAsJsonObject();
                if (node.get("closer") != null) {
                    // Grab number of the PR
                    var closer = node.getAsJsonObject("closer");
                    if (closer.get("commitUrl") != null) {
                        commitRef = (node.getAsJsonObject("closer")).get("commitUrl").getAsString();
                    }
                }
            }
        } catch (Exception e) {
            logger.error(String.valueOf(e));
        }
        return commitRef;
    }

    /**
     * Retrieves commits referencing issues.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getCommitsReferencingIssue(String repoOwner,
                                                   String repoName,
                                                   String issueNumber) {
        List<String> commitsRef = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " +issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on ReferencedEvent {\n" +
                "            commit {\n" +
                "              commitUrl\n" +
                "            }\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JsonObject payload = jsonParser.fromJson(jsonIssue, JsonObject.class);
            JsonObject data = payload.getAsJsonObject("data");
            if (data.get("repository") == null) return commitsRef;
            JsonObject repository = data.getAsJsonObject("repository");
            if (repository.get("issue") == null)    return commitsRef;
            JsonArray nodes = repository.getAsJsonObject("issue").getAsJsonObject("timelineItems").getAsJsonArray("nodes");
            for (JsonElement nodeObj : nodes) {
                var node = nodeObj.getAsJsonObject();
                if (node.get("commit") != null) {
                    // Grab number of the PR
                    var closer = node.getAsJsonObject("commit");
                    if (closer.get("commitUrl") != null) {
                        var commitUrl = node.getAsJsonObject("commit").get("commitUrl").getAsString();
                        if (commitUrl.contains("/" + repoOwner + "/" + repoName + "/")) {
                            commitsRef.add(commitUrl);
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error(String.valueOf(e));
        }
        return commitsRef;
    }

    /**
     * Retrieves references made in comments of the issue to PRs or Commits of the same repo.
     * @param repoOwner - Owner of the repo
     * @param repoName - Name of the repo
     * @param issueNumber - Issue number
     * @return - list of String ids of those PRs
     */
    public List<String> getReferencesInIssueComments(String repoOwner, String repoName, String issueNumber) {
        List<String> refLinks = new ArrayList<>();
        var query = "query {\n" +
                "  repository(owner: \""+ repoOwner +"\", name: \"" + repoName +"\") {\n" +
                "    issue(number: " +issueNumber + ") {\n" +
                "      timelineItems(first: 100) {\n" +
                "        nodes {\n" +
                "          ... on IssueComment {\n" +
                "            body\n" +
                "          }\n" +
                "        }\n" +
                "      }\n" +
                "    }\n" +
                "  }\n" +
                "}";
        HashMap<String, String> values = new HashMap<>();
        values.put("query", query);
        try {
            String jsonIssue = httpClient.sendPost("https://api.github.com/graphql", token, values);
            // Parse the json response
            JsonObject payload = jsonParser.fromJson(jsonIssue, JsonObject.class);
            JsonObject data = payload.getAsJsonObject("data");
            if (data.get("repository") == null) return refLinks;
            JsonObject repository = data.getAsJsonObject("repository");
            if (repository.get("issue") == null)    return refLinks;
            JsonArray nodes = repository.getAsJsonObject("issue").getAsJsonObject("timelineItems").getAsJsonArray("nodes");
            for (JsonElement nodeObj : nodes) {
                var node = nodeObj.getAsJsonObject();
                if (node.get("body") != null) {
                    // Grab potential links
                    var links = PatchFinder.findPatchLinks(node.get("body").toString());
                    for (String ref : links) {
                        if (ref.contains(repoOwner + "/" + repoName)) {
                            refLinks.add(ref);
                        }
                    }
                }
            }

        } catch (Exception e) {
            logger.error(String.valueOf(e));
        }
        return refLinks;
    }

    public String getPR(String repoOwner, String repoName, String prNumber) {
        var apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/pulls/" + prNumber;
        return httpClient.sendGet(apiLink, token);
    }

    public String getIssue(String repoOwner, String repoName, String issueNumber) {
        var apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/issues/" + issueNumber;
        return httpClient.sendGet(apiLink, token);
    }

    public String getCommit(String repoOwner, String repoName, String commitHash) {
        var apiLink = "https://api.github.com/repos/" + repoOwner + "/" + repoName + "/commits/" + commitHash;
        return httpClient.sendGet(apiLink, token);
    }
}
