/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package aggregator.parsers;

import aggregator.connections.JavaHttpClient;
import aggregator.mappers.VersionRanger;
import com.google.gson.Gson;
import com.google.gson.JsonArray;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import com.google.gson.reflect.TypeToken;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.Severity;
import utils.Vulnerability;

import java.lang.reflect.Type;
import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Objects;
import java.util.concurrent.ConcurrentHashMap;

import static java.lang.Math.max;
import static java.lang.Thread.sleep;

// This product uses data from the NVD API but is not endorsed or certified by the NVD.

// Modification or False Representation of Content
// If you modify the content accessed through the API, you may not attribute the source as the NVD.
public class NVDParser implements VulnerabilityParser {

    private JavaHttpClient client;
    private final VersionRanger versionRanger;
    private static final Logger logger = LoggerFactory.getLogger(NVDParser.class.getName());

    private String mnt;
    private final String cwePattern = "CWE-[0-9]+";
    private final String baseApiUrl = "https://services.nvd.nist.gov/rest/json/cves/2.0";
    //https://services.nvd.nist.gov/rest/json/cves/2.0/?lastModStartDate=2021-08-04T13:00:00.000%2B01:00&lastModEndDate=2021-10-22T13:36:00.000%2B01:00

    public NVDParser(JavaHttpClient client, VersionRanger versionRanger, String mnt) {
        this.client = client;
        this.versionRanger = versionRanger;
        this.mnt = mnt;
    }

    public VersionRanger getVersionRanger() {
        return versionRanger;
    }

    /*
    Took 20 minutes for 236000 entries of NVD
     */
    @Override
    public HashMap<String, Vulnerability> getVulnerabilities(boolean updatesOnly) {
        try {
            HashMap<String, Vulnerability> vulnerabilities = retrieveNVDData(updatesOnly);
            logger.info("Parsed " + vulnerabilities.size() + " vulnerabilities from NVD");
            return vulnerabilities;
        } catch (InterruptedException e) {
            throw new RuntimeException(e);
        }
    }

    /*
    Added artificial delay to 6 secs between get requests according to https://nvd.nist.gov/developers/start-here
    @TODO delay can probably be lowered
     */
    public HashMap<String, Vulnerability> retrieveNVDData(boolean updatesOnly) throws InterruptedException {
        ConcurrentHashMap<String, Vulnerability> vulnerabilities = new ConcurrentHashMap<>();
        int totalResults = 1;
        int startingIndex = 0;

        while (startingIndex < totalResults) {
            long startTime = System.currentTimeMillis();

            String reponse = client.sendGet( baseApiUrl + "/?startIndex=" + startingIndex);
            Gson gson = new Gson();
            JsonObject responseJsonObject = gson.fromJson(reponse, (Type) JsonObject.class);
            totalResults = responseJsonObject.get("totalResults").getAsInt();
            startingIndex += responseJsonObject.get("resultsPerPage").getAsInt();
            logger.info("Total amount of received cve entries: " + startingIndex);

            Type listType = new TypeToken<List<JsonElement>>() {}.getType();
            List<JsonElement> myList = gson.fromJson(responseJsonObject.get("vulnerabilities").getAsJsonArray(), listType);

            myList.parallelStream().forEach((arrayEntry) -> {
                try {
                    JsonObject cveJson = arrayEntry.getAsJsonObject().get("cve").getAsJsonObject();
                    Vulnerability vuln = parseNVDcve(cveJson);
                    if (vuln != null) {
                        vulnerabilities.put(vuln.getId(), vuln);
                    }
                } catch (Exception e) {
                    e.printStackTrace();
                }
            });

            sleep(max(0, 6000 - (System.currentTimeMillis() - startTime)));
        }
        return new HashMap<>(vulnerabilities);
    }

    public @Nullable Vulnerability parseNVDcve(@NotNull JsonObject cve) {
        Vulnerability v = new Vulnerability();
        v.setId(getStringOrNull(cve, "id"));

        if (cve.has("configurations")) {
            //Adds the non-hardware cpes and only continue if any cpe was added
            if (addVulnerableVersions(v, cve.getAsJsonArray("configurations"))) {
                v.setPublishedDate(getStringOrNull(cve, "published"));
                v.setLastModifiedDate(getStringOrNull(cve, "lastModified"));

                for (JsonElement desc : cve.getAsJsonArray("descriptions")) {
                    if ("en".equals(getStringOrNull(desc.getAsJsonObject(), "lang"))) {
                        v.setDescription(getStringOrNull(desc.getAsJsonObject(), "value"));
                        break;
                    }
                }

                if (cve.has("metrics")) {
                    setMetrics(v, cve.getAsJsonObject("metrics"));
                }
                if (cve.has("weaknesses")) {
                    addCwes(v, cve.getAsJsonArray("weaknesses"));
                }
                if (cve.has("references")) {
                    addReferences(v, cve.getAsJsonArray("references"));
                }
            }
            else {
                return null;
            }
        }
        return v;
    }

    private void setMetrics(Vulnerability v, @NotNull JsonObject metrics) {
        if (metrics.has("cvssMetricV2")) {
            JsonObject metricV2 = metrics.getAsJsonArray("cvssMetricV2").get(0).getAsJsonObject();
            try {
                v.setSeverityV2(Severity.translate(Objects.requireNonNull(getStringOrNull(metricV2, "baseSeverity"))));
            } catch (NullPointerException e) {
                e.printStackTrace();
            }
            if (metricV2.has("cvssData")) {
                JsonObject cvssDataV3 = metricV2.getAsJsonObject("cvssData");
                v.setVectorCVSS2(getStringOrNull(cvssDataV3, "vectorString"));
                v.setScoreCVSS2(getDoubleOrNull(cvssDataV3, "baseScore"));
            }
        }
        if (metrics.has("cvssMetricV30")) {
            setMetricV3(v, metrics.getAsJsonArray("cvssMetricV30").get(0).getAsJsonObject());
        }
        if (metrics.has("cvssMetricV31")) {
            setMetricV3(v, metrics.getAsJsonArray("cvssMetricV31").get(0).getAsJsonObject());
        }
    }

    private void setMetricV3(Vulnerability v, @NotNull JsonObject metricV3) {
        if (metricV3.has("cvssData")) {
            JsonObject cvssDataV3 = metricV3.getAsJsonObject("cvssData");
            v.setVectorCVSS3(getStringOrNull(cvssDataV3, "vectorString"));
            v.setScoreCVSS3(getDoubleOrNull(cvssDataV3, "baseScore"));
            try {
                v.setSeverityV3(Severity.translate(getStringOrNull(metricV3, "baseSeverity")));
            } catch (NullPointerException npe) {
                npe.printStackTrace();
            }
        }
    }

    private void addCwes(Vulnerability v, @NotNull JsonArray weaknesses) {
        for (JsonElement weakness : weaknesses) {
            if (weakness.getAsJsonObject().has("description")) {
                for (JsonElement cweDesc : weakness.getAsJsonObject().get("description").getAsJsonArray()) {
                    if ("en".equals(cweDesc.getAsJsonObject().get("lang").getAsString())) {
                        v.addCweId(getStringOrNull(cweDesc.getAsJsonObject(), "value"));
                        break;
                    }
                }
            }
        }
    }

    /*
    This is a very ugly way to do this
     */
    private boolean addVulnerableVersions(Vulnerability v, @NotNull JsonArray configurations) {
        boolean softwareCpe = false;
        String[] cpeRemoveCharacters = {"*", "-"};
        for (JsonElement conf : configurations) {
            if (conf.getAsJsonObject().has("nodes")) {
                for (JsonElement nodes : conf.getAsJsonObject().get("nodes").getAsJsonArray()) {
                    JsonObject node = nodes.getAsJsonObject(); // For possible access to operator
                    if (node.has("cpeMatch")) {
                        for (JsonElement cpeMatch : node.getAsJsonArray("cpeMatch")) {
                            JsonObject cpe = cpeMatch.getAsJsonObject();
                            if (cpe.get("vulnerable").getAsBoolean()) {
                                try {
                                    String[] cpeCriteria = Objects.requireNonNull(getStringOrNull(cpe, "criteria")).split(":");
                                    //Check if cpe is hardware
                                    if (!cpeCriteria[2].equals("h")) {
                                        cpeCriteria = Arrays.stream(cpeCriteria)
                                                .filter(entry -> !Arrays.asList(cpeRemoveCharacters).contains(entry))
                                                .toArray(String[]::new);
                                        String baseCpe = String.join(":", cpeCriteria) + ":";
                                        softwareCpe = true;
                                        //@TODO https://github.com/scanoss/purl2cpe potential for getting Purls from cpe

                                    }
                                } catch (NullPointerException npe) {
                                    npe.printStackTrace();
                                }
                            }
                        }
                    }
                }
            }
        }
        return softwareCpe;
    }

    private void addReferences(Vulnerability v, @NotNull JsonArray references) {
        for (JsonElement reference : references) {
            JsonObject ref = reference.getAsJsonObject();
            if (ref.has("url")) {
                String refUrl = ref.get("url").getAsString();
                if (ref.has("tags")) {
                    for (JsonElement tag : ref.getAsJsonArray("tags")) {
                        if ("Patch".equals(tag.getAsString())) {
                            addNVDPatchLink(v, refUrl);
                        }
                    }
                }
                v.addReference(refUrl);
            }
        }
    }

    /*
    Method for determining if the "Patch" reference can be put into the patchLinks collection.
    @TODO what kind of urls should be accepted here.
     */
    private static void addNVDPatchLink(Vulnerability v, @NotNull String ref) {
        if (ref.contains("git")) {
            v.addPatchLink(ref);
        }
    }

    private static @Nullable String getStringOrNull(@NotNull JsonObject jsonObject, String key) {
        return jsonObject.has(key) ? jsonObject.get(key).getAsString() : null;
    }

    private static @Nullable Double getDoubleOrNull(@NotNull JsonObject jsonObject, String key) {
        return jsonObject.has(key) ? jsonObject.get(key).getAsDouble() : null;
    }
}
