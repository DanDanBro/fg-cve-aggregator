/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package aggregator.patches;

import aggregator.connections.JavaHttpClient;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.Patch;
import utils.PatchFinder;

import java.time.LocalDate;
import java.util.HashSet;

public class BitBucketRanger {
    private final Logger logger = LoggerFactory.getLogger(BitBucketRanger.class.getName());
    private final JavaHttpClient client;
    private final Gson gson;

    public BitBucketRanger(JavaHttpClient client, Gson gson) {
        this.client = client;
        this.gson = gson;
    }

    /**
     * Injects information from a Bitbucket commit.
     * Simply adds /raw to the end of the ref.
     * @param ref - link to a Bitbucket commit
     * @return - set of patches
     */
    public HashSet<Patch> parseBitBucketCommit(String ref) {
        logger.info("Parsing BitBucket commit with URL: " + ref);
        var commitInfo = ref.split("/");
        var base       = commitInfo[2];
        var project    = commitInfo[3];
        var repo       = commitInfo[4];
        var commitId   = commitInfo[6];
        var patchLink  = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/commit/" + commitId;
        var commitJson = client.sendGet(patchLink);
        var patches    = new HashSet<Patch>();

        try {
            var commitObj = gson.fromJson(commitJson, JsonObject.class);
            var date      = LocalDate.parse(commitObj.get("date").getAsString());
            var diffLink  = patchLink.replace("/commit/", "/diff/");
            var rawDiff   = client.sendGet(diffLink);
            var vcsPatch  = "git://" + base + "/" + project + "/" + repo + "@" + commitId;
            patches = DiffParser.getPatchesFromUnifiedDiff(rawDiff);
            patches.forEach(p -> {
                p.setPatchDate(date.toString());
                p.setPatchUrl(vcsPatch);
            });
        } catch (Exception e) {
            logger.error("Could not parse BitBucketCommit: " + ref);
        }
        return patches;
    }

    /**
     * Injects information from a Bitbucket pull-request.
     * Looks for the merging commit in the JSON.
     * @param ref - link to a Bitbucket pull-request
     * @return - set of patches
     */
    public HashSet<Patch> parseBitBucketPullRequest(String ref) {
        logger.info("Parsing BitBucket pull request with URL: " + ref);
        var prInfo    = ref.split("/");
        var project   = prInfo[3];
        var repo      = prInfo[4];
        var prId      = prInfo[6];
        var patchLink = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/pullrequests/" + prId;
        var prJson    = client.sendGet(patchLink);
        if (!prJson.contains("Not Found")) {
            try {
                var prObj = gson.fromJson(prJson, JsonObject.class);
                if (prObj.get("merge_commit") != null) {
                    var mergeCommitObj = prObj.getAsJsonObject("merge_commit");
                    var mergeCommitHash = mergeCommitObj.get("hash");
                    var linkToCommit = "https://bitbucket.org/" + project
                            + "/" + repo + "/commits/" + mergeCommitHash;
                    return PatchFinder.parseReference(linkToCommit);
                }
            } catch (Exception e) {
                logger.error("Could not parse BitBucket PR: " + ref);
            }
        }
        return null;
    }

    /**
     * Injects information from a Bitbucket issue.
     * Looks for attachments and comments that contain links to patches.
     * @param ref - link to a Bitbucket issue
     * @return - set of patches
     */
    public HashSet<Patch> parseBitBucketIssue(String ref) {
        logger.info("Parsing BitBucket issue with URL: " + ref);
        var patches = new HashSet<Patch>();
        var prInfo      = ref.split("/");
        var project     = prInfo[3];
        var repo        = prInfo[4];
        var issueNumber = prInfo[6];
        var refAttachments = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/issues/" + issueNumber + "/attachments";
        var refComments    = "https://bitbucket.org/api/2.0/repositories/" + project + "/" + repo + "/issues/" + issueNumber + "/comments";
        try {
            var issueAttachmentsJson = client.sendGet(refAttachments);
            if (!issueAttachmentsJson.contains("\"message\": \"No Issue matches the given query.\"")) {
                var issueAttachments = gson.fromJson(issueAttachmentsJson, JsonObject.class).getAsJsonArray("values");
                for (JsonElement obj : issueAttachments) {
                    if (obj.getAsJsonObject().get("name").toString().contains(".patch")) {
                        var links = obj.getAsJsonObject().getAsJsonObject("links").getAsJsonObject("self").getAsJsonArray("href");
                        for (JsonElement link : links) {
                            var patchInfoInFile = client.sendGet(link.getAsString());
                            var patchFromAttach = DiffParser.getPatchesFromUnifiedDiff(patchInfoInFile);
                            patchFromAttach.forEach(p -> p.setPatchUrl(link.toString()));
                            patches.addAll(patchFromAttach);
                        }
                    }
                }
            }

            var issueCommentsJson = client.sendGet(refComments);
            if (!issueCommentsJson.contains("\"message\": \"No Issue matches the given query.\"")) {
                var issueComments = gson.fromJson(issueCommentsJson, JsonObject.class).getAsJsonArray("values");
                for (JsonElement comment : issueComments) {
                    var content = comment.getAsJsonObject().getAsJsonObject("content").getAsJsonObject("raw").getAsString();
                    var potentialPatches = PatchFinder.findPatchLinks(content);
                    for (String pp : potentialPatches) {
                        var patch = PatchFinder.parseReference(pp);
                        if (patch != null)  patches.addAll(patch);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Could not parse BitBucket Issue: " + ref);
        }
        return patches;
    }
}
