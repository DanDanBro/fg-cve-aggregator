/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package aggregator.patches;

import aggregator.connections.JavaHttpClient;
import com.google.gson.Gson;
import com.google.gson.JsonElement;
import com.google.gson.JsonObject;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import utils.Patch;
import utils.PatchFinder;

import java.time.LocalDate;
import java.util.HashSet;
import java.util.stream.Collectors;

public class JIRARanger extends GenericRanger {
    private final Logger logger = LoggerFactory.getLogger(JIRARanger.class.getName());

    public JIRARanger(JavaHttpClient httpClient, Gson jsonParser) {
        super(httpClient, jsonParser);
    }

    /**
     * Injects information taking it from JIRA tickets.
     * The information is held into either comments or attachments.
     * @param ref - link to JIRA ticket
     * @return - set of patches
     */
    public HashSet<Patch> parseJIRATicket(String ref) {
        ref = ref.split("\\?")[0];
        logger.info("Parsing JIRA Ticket with URL: " + ref);
        var patches = new HashSet<Patch>();
        var jiraServer = ref.split("/browse/")[0];
        var ticketId = ref.split("/browse/")[1];

        var linkToJson = jiraServer + "/rest/api/2/issue/" + ticketId;
        var ticketJson = httpClient.sendGet(linkToJson);

        if (ticketJson.contains("{\"errorMessages\":[\"Issue Does Not Exist\"]")) {
            return patches;
        }

        try {
            JsonObject payload = jsonParser.fromJson(ticketJson, JsonObject.class);
            var fields = payload.getAsJsonObject("fields");

            var attachments = fields.getAsJsonArray("attachment");
            var comments = fields.getAsJsonObject("comment").getAsJsonArray("comments");

            // Attachments
            if (attachments != null) {
                for (JsonElement attachment : attachments) {
                    var linkToAttachment = attachment.getAsJsonObject().get("content").getAsString();
                    if (linkToAttachment.endsWith(".patch")) {
                        var rawPatch = httpClient.sendGet(linkToAttachment);
                        patches.addAll(DiffParser.getPatchesFromUnifiedDiff(rawPatch));
                        var creationDate = LocalDate.parse(attachment.getAsJsonObject().get("created").getAsString());
                        patches.forEach(p -> {
                            p.setPatchDate(creationDate.toString());
                            p.setPatchUrl(linkToAttachment);
                        });
                    }
                }
            }

            // Comments
            if (comments != null) {
                var potentialPatches = new HashSet<String>();
                for (JsonElement comment : comments) {
                    var body = comment.getAsJsonObject().get("body").getAsString();
                    var pp = PatchFinder.findPatchLinks(body);
                    var cpref = ref;
                    potentialPatches.addAll(
                            pp.stream()
                                    .filter(p -> !p.equals(cpref) && !p.contains(cpref))
                                    .collect(Collectors.toList()));
                }
                for (String pp : potentialPatches) {
                    var vpp = PatchFinder.parseReference(pp);
                    if (vpp != null && vpp.size() > 0) {
                        patches.addAll(vpp);
                    }
                }
            }
        } catch (Exception e) {
            logger.error("Could not parse JIRA ticket: " + ref);
        }
        return patches;
    }
}
